trigger:
  - master

pool:
  vmImage: ubuntu-latest

name: '0.1.$(Build.BuildID)'

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install Node.js'

  - bash: |
      if [ ! -f .npmrc ]; then
        echo "Creating .npmrc file..."
        echo "registry=https://pkgs.dev.azure.com/mesamericas/d7bdf2f6-a624-45ce-a264-701f6ff0cc3f/_packaging/sms-core/npm/registry/" > .npmrc
        echo "always-auth=true" >> .npmrc
      fi
    displayName: 'Ensure .npmrc exists'

  - task: npmAuthenticate@0
    inputs:
      workingFile: .npmrc
    displayName: 'NPM Authenticate'

  - bash: |
      echo "Testing npm feed access..."
      npm config list
      
      # Try to get version with retries
      max_attempts=3
      attempt=1
      while [ $attempt -le $max_attempts ]; do
        echo "Attempt $attempt to get version from feed..."
        FEED_VERSION=$(npm view vsc-mes-scaffolding version 2>/dev/null || echo "")
        
        if [ ! -z "$FEED_VERSION" ]; then
          echo "Successfully got version $FEED_VERSION from feed"
          IFS='.' read -r -a version_parts <<< "$FEED_VERSION"
          PATCH=$((version_parts[2] + 1))
          NEW_VERSION="${version_parts[0]}.${version_parts[1]}.$PATCH"
          break
        else
          echo "Attempt $attempt failed"
          if [ $attempt -eq $max_attempts ]; then
            echo "Using package.json version after $max_attempts failed attempts"
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
            PATCH=$((version_parts[2] + 1))
            NEW_VERSION="${version_parts[0]}.${version_parts[1]}.$PATCH"
          fi
          attempt=$((attempt + 1))
          [ $attempt -le $max_attempts ] && sleep 5
        fi
      done
      
      echo "Setting version to $NEW_VERSION"
      if ! npm version $NEW_VERSION --no-git-tag-version; then
        echo "Failed to update version in package.json"
        exit 1
      fi
      
      echo "Successfully updated version to $NEW_VERSION"
      echo "##vso[task.setvariable variable=NEW_VERSION]$NEW_VERSION"
    displayName: 'Update Version'

  - script: |
      npm install -g vsce
      npm install
    displayName: 'Install vsce and dependencies'

  - script: |
      vsce package
    displayName: 'Package extension'

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: |
        **/*.vsix
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: 'extension'
      publishLocation: 'pipeline'

  - task: Npm@1
    inputs:
      command: 'publish'
      publishRegistry: 'useFeed'
      publishFeed: 'd7bdf2f6-a624-45ce-a264-701f6ff0cc3f/5d21d636-4e4f-4ae5-babf-051c32637bc1'
      publishPackageMetadata: true