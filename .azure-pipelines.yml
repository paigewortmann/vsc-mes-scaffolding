trigger:
  - master

pool:
  vmImage: ubuntu-latest

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install Node.js'

  - bash: |
      # Get current version from package.json
      CURRENT_VERSION=$(node -p "require('./package.json').version")
      
      # Split version into parts
      IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
      
      # Increment patch version
      PATCH=$((version_parts[2] + 1))
      NEW_VERSION="${version_parts[0]}.${version_parts[1]}.$PATCH"
      
      # Update package.json with new version
      npm version $NEW_VERSION --no-git-tag-version
      
      echo "##vso[task.setvariable variable=NEW_VERSION]$NEW_VERSION"
    displayName: 'Update Version'

  - script: |
      npm install -g vsce
      npm install
    displayName: 'Install vsce and dependencies'

  - script: |
      vsce package
    displayName: 'Package extension'

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: |
        **/*.vsix
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: 'extension'
      publishLocation: 'pipeline'

  - task: UniversalPackages@0
    inputs:
      command: 'publish'
      publishDirectory: '$(Build.ArtifactStagingDirectory)'
      feedsToUsePublish: 'internal'
      vstsFeedPublish: 'd7bdf2f6-a624-45ce-a264-701f6ff0cc3f/5d21d636-4e4f-4ae5-babf-051c32637bc1'
      vstsFeedPackagePublish: 'vsc-mes-scaffolding'
      versionOption: 'custom'
      versionPublish: '$(NEW_VERSION)'